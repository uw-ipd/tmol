#!/usr/bin/env python3

import os
import json
import subprocess
import logging
import argparse
import platform

logging.basicConfig(level=logging.INFO, format="%(message)s")

parser = argparse.ArgumentParser(description="Setup tmol development environment.")
parser.add_argument(
    "-n", "--name", type=str, default="tmol", help="Name of target conda environment."
)
parser.add_argument(
    "--dry-run",
    default=False,
    action="store_true",
    help="Only display what setup commands would have been executed.",
)
args = parser.parse_args()


def check_call(command):
    logging.info(command)
    if args.dry_run:
        return
    return subprocess.check_call(command, shell=True)


def call(command):
    logging.info(command)
    if args.dry_run:
        return
    return subprocess.call(command, shell=True)


def env_type():
    if platform.system() == "Linux":
        return "linux-64"
    else:
        return "osx-64"


# create a temporary requirements.txt
# from requirements.in and requirements-dev.in
# and use it in a temporary env.yml
check_call(
    "cat environments/requirements.in environments/requirements-dev.in > environments/temp_requirements.in"
)
check_call(
    "sed 's:- -r requirements.in:- -r temp_requirements.in:' environments/env.yml > environments/temp_env.yml"
)


# Requires an active root conda installation see:
# https://conda.io/miniconda.html
check_call(
    f"conda create -n {args.name} && conda env update -n {args.name} --file=environments/temp_env.yml"
)

# Conda 4.4+ compatible activation
conda_envs = json.loads(
    subprocess.check_output("conda env list --json", shell=True).decode()
)
envpath = [p for p in conda_envs["envs"] if os.path.basename(p) == args.name]
if len(envpath) >= 1:
    envpath = envpath[0]
else:
    raise ValueError("Target env not present.")

check_call("%s/bin/pip install -e ." % envpath)
check_call("rm environments/temp_env.yml environments/temp_requirements.in")

call("ln -sf ../../.post-checkout .git/hooks/post-checkout")
check_call("%s/bin/pre-commit install " % envpath)
