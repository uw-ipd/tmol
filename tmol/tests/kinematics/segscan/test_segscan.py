import pytest

import torch

from tmol.utility.cpp_extension import load, relpaths, modulename

from tmol.tests.torch import requires_cuda


@requires_cuda
@pytest.fixture
def extension():
    return load(modulename(f"{__name__}.cuda"), relpaths(__file__, "segscan.cu"))


@requires_cuda
def test_segscan(extension):
    """CUDA segscan code
    """

    # x = torch.ones(1000000, dtype=torch.float32)
    # segs = torch.tensor([4, 7, 35, 273, 1129, 43567, 143678, 567778], dtype=torch.int)
    x = torch.ones(1000, dtype=torch.float32)
    segs = torch.tensor([13], dtype=torch.int)
    xcuda = x.to(device="cuda")
    segscuda = segs.to(device="cuda")

    y = extension.segscan_incl(x, segs)
    ycuda = extension.segscan_incl(xcuda, segscuda)

    torch.testing.assert_allclose(ycuda.to(device="cpu"), y)

    y = extension.segscan_excl(x, segs)
    ycuda = extension.segscan_excl(xcuda, segscuda)

    torch.testing.assert_allclose(ycuda.to(device="cpu"), y)


@requires_cuda
def test_segscan_highly_segmented(extension):
    x = torch.ones(808, dtype=torch.float32)
    segs = torch.tensor(
        [
            0,
            2,
            4,
            6,
            8,
            10,
            12,
            14,
            16,
            18,
            20,
            22,
            24,
            27,
            29,
            31,
            33,
            35,
            37,
            39,
            41,
            45,
            47,
            49,
            52,
            54,
            56,
            58,
            60,
            62,
            64,
            66,
            68,
            70,
            72,
            74,
            76,
            78,
            81,
            83,
            85,
            87,
            89,
            91,
            94,
            96,
            98,
            100,
            103,
            105,
            107,
            109,
            111,
            113,
            115,
            117,
            119,
            121,
            123,
            125,
            127,
            129,
            132,
            134,
            136,
            138,
            141,
            143,
            145,
            147,
            149,
            151,
            154,
            156,
            158,
            160,
            162,
            164,
            166,
            169,
            171,
            173,
            175,
            177,
            179,
            181,
            183,
            186,
            188,
            190,
            192,
            194,
            196,
            198,
            200,
            202,
            204,
            206,
            208,
            210,
            212,
            214,
            216,
            218,
            220,
            222,
            225,
            227,
            229,
            231,
            234,
            236,
            238,
            240,
            242,
            244,
            246,
            248,
            250,
            252,
            254,
            256,
            258,
            260,
            262,
            265,
            267,
            269,
            271,
            273,
            275,
            277,
            279,
            281,
            283,
            285,
            287,
            289,
            291,
            293,
            295,
            297,
            299,
            301,
            303,
            305,
            307,
            309,
            311,
            313,
            315,
            317,
            320,
            322,
            324,
            326,
            328,
            330,
            332,
            334,
            336,
            338,
            340,
            342,
            344,
            346,
            348,
            350,
            352,
            354,
            356,
            358,
            360,
            362,
            364,
            366,
            368,
            370,
            372,
            374,
            376,
            379,
            381,
            383,
            385,
            387,
            389,
            391,
            393,
            395,
            397,
            399,
            401,
            403,
            405,
            407,
            409,
            411,
            413,
            415,
            417,
            419,
            421,
            423,
            425,
            427,
            429,
            431,
            433,
            435,
            437,
            439,
            441,
            443,
            445,
            447,
            449,
            451,
            454,
            456,
            458,
            460,
            463,
            465,
            467,
            469,
            472,
            474,
            476,
            478,
            480,
            482,
            484,
            486,
            489,
            491,
            493,
            495,
            497,
            499,
            501,
            503,
            505,
            507,
            509,
            511,
            513,
            515,
            517,
            519,
            521,
            523,
            525,
            527,
            529,
            531,
            533,
            535,
            537,
            540,
            542,
            544,
            546,
            548,
            550,
            552,
            554,
            556,
            558,
            560,
            562,
            564,
            566,
            568,
            570,
            572,
            574,
            577,
            579,
            582,
            584,
            586,
            588,
            590,
            592,
            594,
            597,
            599,
            601,
            603,
            605,
            607,
            609,
            611,
            613,
            615,
            617,
            619,
            622,
            624,
            626,
            628,
            630,
            632,
            635,
            637,
            639,
            641,
            643,
            645,
            647,
            649,
            651,
            653,
            655,
            657,
            659,
            661,
            663,
            665,
            667,
            669,
            671,
            673,
            675,
            677,
            679,
            681,
            683,
            685,
            687,
            689,
            691,
            694,
            696,
            698,
            700,
            702,
            704,
            707,
            709,
            711,
            713,
            715,
            717,
            721,
            723,
            725,
            727,
            730,
            732,
            734,
            736,
            739,
            741,
            743,
            745,
            747,
            749,
            752,
            754,
            756,
            758,
            760,
            762,
            764,
            766,
            768,
            770,
            772,
            775,
            777,
            779,
            781,
            784,
            786,
            788,
            790,
            792,
            794,
            796,
            798,
            800,
            802,
            804,
            806,
        ],
        dtype=torch.int32,
    )

    xcuda = x.to(device="cuda")
    segscuda = segs.to(device="cuda")
    y = extension.segscan_incl(x, segs)
    ycuda = extension.segscan_incl(xcuda, segscuda)
    torch.testing.assert_allclose(ycuda.to(device="cpu"), y)

    x = torch.ones(840, dtype=torch.float32)
    segs = torch.tensor(
        [
            0,
            2,
            8,
            10,
            12,
            14,
            20,
            22,
            24,
            26,
            31,
            33,
            35,
            37,
            44,
            46,
            48,
            50,
            54,
            56,
            58,
            60,
            67,
            69,
            71,
            73,
            77,
            79,
            81,
            83,
            88,
            90,
            92,
            94,
            98,
            100,
            102,
            104,
            106,
            108,
            110,
            112,
            119,
            121,
            123,
            125,
            129,
            131,
            133,
            135,
            140,
            142,
            144,
            146,
            150,
            152,
            154,
            156,
            161,
            163,
            165,
            167,
            172,
            174,
            176,
            178,
            182,
            184,
            186,
            188,
            193,
            195,
            197,
            202,
            204,
            206,
            208,
            212,
            214,
            216,
            218,
            222,
            224,
            226,
            228,
            232,
            234,
            236,
            238,
            243,
            245,
            247,
            249,
            254,
            256,
            258,
            260,
            265,
            267,
            269,
            271,
            275,
            277,
            279,
            281,
            288,
            290,
            292,
            294,
            297,
            299,
            301,
            303,
            310,
            312,
            314,
            316,
            321,
            323,
            325,
            327,
            333,
            335,
            337,
            339,
            343,
            345,
            347,
            349,
            356,
            358,
            360,
            362,
            367,
            369,
            371,
            373,
            375,
            377,
            379,
            381,
            386,
            388,
            390,
            393,
            397,
            399,
            401,
            406,
            408,
            410,
            412,
            416,
            418,
            420,
            422,
            428,
            430,
            432,
            434,
            440,
            442,
            444,
            446,
            454,
            456,
            458,
            460,
            465,
            467,
            469,
            471,
            476,
            478,
            480,
            482,
            490,
            492,
            494,
            496,
            498,
            501,
            503,
            505,
            507,
            509,
            511,
            513,
            520,
            522,
            524,
            526,
            532,
            534,
            536,
            538,
            543,
            545,
            547,
            549,
            554,
            556,
            558,
            560,
            564,
            566,
            568,
            570,
            572,
            574,
            576,
            578,
            586,
            588,
            590,
            592,
            596,
            598,
            600,
            602,
            607,
            609,
            611,
            613,
            617,
            619,
            621,
            623,
            627,
            629,
            631,
            633,
            642,
            644,
            646,
            648,
            653,
            655,
            657,
            659,
            664,
            666,
            668,
            670,
            676,
            678,
            680,
            682,
            689,
            691,
            693,
            695,
            700,
            702,
            704,
            706,
            710,
            712,
            714,
            716,
            720,
            722,
            724,
            726,
            731,
            733,
            735,
            737,
            743,
            745,
            747,
            749,
            754,
            756,
            758,
            760,
            764,
            766,
            768,
            770,
            775,
            777,
            779,
            781,
            789,
            791,
            793,
            795,
            800,
            802,
            804,
            806,
            815,
            817,
            819,
            821,
            823,
            825,
            827,
            829,
            831,
            834,
        ],
        dtype=torch.int32,
    )

    xcuda = x.to(device="cuda")
    segscuda = segs.to(device="cuda")
    y = extension.segscan_incl(x, segs)
    ycuda = extension.segscan_incl(xcuda, segscuda)
    torch.testing.assert_allclose(ycuda.to(device="cpu"), y)


@requires_cuda
@pytest.mark.benchmark
def test_segscan_excl_cuda_bench(benchmark, extension):
    """CUDA segscan benchmark
    """
    x = torch.ones(10000000, dtype=torch.float32)
    segs = torch.tensor([4, 7, 35, 273, 1129, 43567, 143678, 567778], dtype=torch.int)
    xcuda = x.to(device="cuda")
    segscuda = segs.to(device="cuda")

    def cuda_segscan():
        return extension.segscan_excl(xcuda, segscuda)

    benchmark(cuda_segscan)


@requires_cuda
@pytest.mark.benchmark
def test_segscan_incl_cuda_bench(benchmark, extension):
    """CUDA segscan benchmark
    """
    x = torch.ones(10000000, dtype=torch.float32)
    segs = torch.tensor([4, 7, 35, 273, 1129, 43567, 143678, 567778], dtype=torch.int)
    xcuda = x.to(device="cuda")
    segscuda = segs.to(device="cuda")

    def cuda_segscan():
        return extension.segscan_incl(xcuda, segscuda)

    benchmark(cuda_segscan)


@requires_cuda
@pytest.mark.benchmark
def test_segscan_cpu_bench(benchmark, extension):
    """CPU segscan baseline benchmark
    """
    x = torch.ones(10000000, dtype=torch.float32)
    segs = torch.tensor([4, 7, 35, 273, 1129, 43567, 143678, 567778], dtype=torch.int)

    def cpu_segscan():
        return extension.segscan_incl(x, segs)

    benchmark(cpu_segscan)
