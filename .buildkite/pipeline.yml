steps:
  - label: ':hammer: Build Runner'
    command: |
      docker build -f .buildkite/runner/Dockerfile . -t tmol-runner:${BUILDKITE_JOB_ID} -t tmol-runner:${BUILDKITE_COMMIT}
  - label: ':shrug: Testing'
    # Run non-linting tests in a single process, relying on internal multithreading
    command: |
      echo "--- environment"
      conda info
      conda list

      echo "--- nvidia-smi"
      nvidia-smi

      echo "--- pip install"
      pip install -e .

      echo "+++ pytest"

      mkdir -p report/test
      pytest -v -k 'not linting' --cov=./tmol --junitxml=report/test/junit.xml 2>&1 | tee report/test/log.txt

      echo "--- report"
      # Must upload here, rather than via artifact path, so components are available for the test summary.
      buildkite-agent artifact upload "report/test/*"

      codecov -F pytest
    plugins:
      uw-ipd/docker#1861bbe:
        runtime: "nvidia"
        image: "tmol-runner:${BUILDKITE_JOB_ID}"
      uw-ipd/test-summary#8fa3c9a:
        inputs:
          - label: tests
            artifact_path: report/test/junit.xml
            type: junit
        formatter:
          type: details
        context: test-summary

  - label: ':microscope: Linting'
    command: |
      echo "+++ linting"
      pytest -n auto -k 'linting' --junitxml=report/linting/junit.xml 2>&1 | tee report/linting/log.txt

      echo "--- report"
      # Must upload here, rather than via artifact path, so components are available for the test summary.
      buildkite-agent artifact upload "report/linting/*"
    plugins:
      uw-ipd/docker#1861bbe:
        runtime: "nvidia"
        image: "tmol-runner:${BUILDKITE_JOB_ID}"
      uw-ipd/test-summary#8fa3c9a:
        inputs:
          - label: linting
            artifact_path: report/linting/junit.xml
            type: junit
        formatter:
          type: details
        context: test-summary
