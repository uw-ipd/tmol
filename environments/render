#!/usr/bin/env python3
import io
import os
import argparse

root = os.path.dirname(__file__)


def render(components):

    dependencies = []
    requirements = []

    for c in components:
        dp = os.path.join(root, "%s.dependencies.txt" % c)
        rp = os.path.join(root, "%s.requirements.txt" % c)

        if os.path.exists(dp):
            dependencies.append("# %s" % c)
            dependencies.extend(
                "- %s" % l.strip()
                for l in open(dp, "r").readlines()
                if l.strip()
            )

        if os.path.exists(rp):
            requirements.append("# %s" % c)
            requirements.extend(
                "- %s" % l.strip()
                for l in open(rp, "r").readlines()
                if l.strip()
            )

    env = io.StringIO()
    print("dependencies:", file=env)
    for d in dependencies:
        print("  %s" % d, file=env)
    print("  - pip:", file=env)
    for r in requirements:
        print("    %s" % r, file=env)

    return env.getvalue()


parser = argparse.ArgumentParser(
    description='Render environment.yml for target configuration.'
)
parser.add_argument(
    'platform',
    choices=["linux.cuda", "linux.cpu", "osx.cpu"],
)
parser.add_argument(
    'target',
    choices=["run", "test", "dev"],
)
args = parser.parse_args()

layers = (
    ["core", args.platform] +
    {
        "run": [],
        "test": ["test"],
        "dev": ["test", "dev"],
    }[args.target]
)

print(render(layers))
