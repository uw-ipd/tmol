#!/usr/bin/env python3
import io
import os
import ruamel.yaml
import conda_lock.conda_lock as conda_lock
import pathlib

import shutil

yaml = ruamel.yaml.YAML()

root = os.path.dirname(__file__)


def render(components):

    data = None
    for c in components:
        layer = yaml.load(open(f"{c}.yml"))
        if data is None:
            data = layer
        else:
            for f in layer:
                idx_offset = len(data[f])
                data[f].extend(layer[f])
                for idx, c in layer[f].ca.items.items():
                    data[f].yaml_key_comment_extend(idx + idx_offset, c)

    env = io.StringIO()
    yaml.dump(data, env)
    return env.getvalue()


platforms = ("linux-64", "osx-64")
layers = {
    "run": ["core"],
    "test": ["core", "test", "docs"],
    "dev": ["core", "test", "docs", "dev"],
    "support": ["core", "test", "docs", "dev", "support"],
}

for n, l in layers.items():
    print(f"locking layer: {n} : {l}")

    shutil.os.makedirs("locks", exist_ok=True)

    with open(f"locks/layer.{n}.yml", "w") as of:
        of.write(render(l))

    conda_lock.run_lock(
        pathlib.Path(f"locks/layer.{n}.yml"), conda_exe=None, platforms=platforms
    )

    for p in platforms:
        shutil.move(f"conda-{p}.lock", f"locks/{n}-{p}.lock")
